name: AI Codegen from Issue
on:
  issues:
    types: [labeled]      # runs when a label is added
  workflow_dispatch:      # also allow manual runs

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  codegen:
    # run only when the newly added label is "codegen" OR manual run
    if: (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'codegen') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create feature branch
        id: branch
        run: |
          TITLE="${{ github.event_name == 'workflow_dispatch' && 'manual-run' || github.event.issue.title }}"
          SAFE_TITLE="$(echo "$TITLE" | tr ' ' '-' | tr -cd '[:alnum:]-' | tr '[:upper:]' '[:lower:]')"
          BR="feature/codegen-${SAFE_TITLE}-${{ github.event_name == 'workflow_dispatch' && 'manual' || github.event.issue.number }}"
          git checkout -b "$BR"
          echo "BRANCH=$BR" >> $GITHUB_OUTPUT

      # ðŸ§  Run Aider to make code changes based on the Issue text
            # â”€â”€ Attempt 1: OpenAI (current setup)
      - name: Apply changes with Aider (OpenAI)
        id: aider_openai
        uses: mirrajabi/aider-github-action@v1.1.0
        continue-on-error: true
        with:
          api_key_env_name: OPENAI_API_KEY
          api_key_env_value: ${{ secrets.OPENAI_API_KEY }}
          branch: ${{ steps.ctx.outputs.branch }}
          model: gpt-4o-mini
          aider_args: >-
            --yes
            --message "You are updating a React/TypeScript currency-converter app (coin-swap-buddy).
            Use the GitHub Issue below as the single source of truth.
            Create or update files under src/ or app/ only.
            Keep behavior safe and typed. Add small tests when obvious.
            Do not modify CI/tooling.
            Issue Title: ${{ steps.ctx.outputs.title }}
            Issue Body:
            ${{ steps.ctx.outputs.body }}"

      # â”€â”€ Attempt 2: Gemini (only runs if OpenAI failed)
      - name: Apply changes with Aider (Gemini fallback)
        id: aider_gemini
        if: steps.aider_openai.outcome == 'failure'
        uses: mirrajabi/aider-github-action@v1.1.0
        continue-on-error: true
        with:
          api_key_env_name: GEMINI_API_KEY
          api_key_env_value: ${{ secrets.GEMINI_API_KEY }}
          branch: ${{ steps.ctx.outputs.branch }}
          model: gemini/gemini-1.5-flash-002
          aider_args: >-
            --yes
            --message "You are updating a React/TypeScript currency-converter app (coin-swap-buddy).
            Use the GitHub Issue below as the single source of truth.
            Create or update files under src/ or app/ only.
            Keep behavior safe and typed. Add small tests when obvious.
            Do not modify CI/tooling.
            Issue Title: ${{ steps.ctx.outputs.title }}
            Issue Body:
            ${{ steps.ctx.outputs.body }}"

      # â”€â”€ Attempt 3: Groq (only runs if both previous attempts failed)
      - name: Apply changes with Aider (Groq fallback)
        id: aider_groq
        if: steps.aider_openai.outcome == 'failure' && steps.aider_gemini.outcome == 'failure'
        uses: mirrajabi/aider-github-action@v1.1.0
        continue-on-error: true
        with:
          api_key_env_name: GROQ_API_KEY
          api_key_env_value: ${{ secrets.GROQ_API_KEY }}
          branch: ${{ steps.ctx.outputs.branch }}
          model: groq/llama-3.1-70b-versatile
          aider_args: >-
            --yes
            --message "You are updating a React/TypeScript currency-converter app (coin-swap-buddy).
            Use the GitHub Issue below as the single source of truth.
            Create or update files under src/ or app/ only.
            Keep behavior safe and typed. Add small tests when obvious.
            Do not modify CI/tooling.
            Issue Title: ${{ steps.ctx.outputs.title }}
            Issue Body:
            ${{ steps.ctx.outputs.body }}"


      - name: Push branch
        run: git push --set-upstream origin "${{ steps.branch.outputs.BRANCH }}"

      - name: Open pull request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: "${{ steps.branch.outputs.BRANCH }}"
          title: "AI codegen: ${{ github.event.issue.title }}"
          body: "Generated from issue #${{ github.event.issue.number }} (label: `codegen`). Please review carefully."
          base: "main"
